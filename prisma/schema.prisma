generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Book {
  id          Int      @id @default(autoincrement())
  title       String
  accessLevel Int      @default(0)
  coverPath   String
  pdfPath     String
  coverFileId String // 封面文件的云存储ID
  pdfFileId   String // PDF文件的云存储ID
  unlist      Boolean  @default(false)
  createdAt   DateTime @default(now())
  year        Int?
  issue       Int?
  time        Int?
  description String?
}

model User {
  id           Int      @id @default(autoincrement())
  nickName     String   @unique
  accessLevel  Int      @default(0)
  name         String?  @db.VarChar(20)
  title        String?  @db.VarChar(20)
  organization String?  @db.VarChar(40)
  lastVisit    DateTime @default(now())
  createdAt    DateTime @default(now())
}

model AccessLog {
  id         Int      @id @default(autoincrement())
  nickName   String   @unique
  firstVisit DateTime @default(now())
  lastVisit  DateTime @default(now())
  visitCount Int      @default(1)
}

model Industry {
  id          String   @id @db.VarChar(12)
  title       String   @db.VarChar(100)
  description String?  @db.Text
  level       Int      @default(0)
  parentId    String?  @db.VarChar(12)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 自关联关系
  parent   Industry?  @relation("IndustryHierarchy", fields: [parentId], references: [id], onDelete: SetNull)
  children Industry[] @relation("IndustryHierarchy")
}

model Member {
  id          Int      @id @default(autoincrement())
  type        String   @db.VarChar(20) // 企业或律师
  name        String   @db.VarChar(100)
  idNumber    String   @unique @db.VarChar(50)
  benefitGroup String  @db.VarChar(100)
  description String?  @db.Text
  email       String   @unique @db.VarChar(100)
  phone       String   @unique @db.VarChar(20)
  company     String?  @db.VarChar(100) // 工作单位，仅律师用
  images      String?  @db.Text // JSON格式存储图片路径数组
  imageTcpId  String?  @db.Text // JSON格式存储图片的TCP file_id数组
  industryIds String?  @db.Text // JSON格式存储行业标签ID数组，仅律师用
  status      Int      @default(0) // 0: 待审核, 1: 正式成员
  isPaid      Boolean  @default(false)
  isStopped   Boolean? @default(false)
  password    String   @default("temp_password") @db.VarChar(20)
  openId      String?  @db.VarChar(100)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 关联关系
  benefitConsumed BenefitConsumed[]
}

model BenefitType {
  id           String         @id @db.VarChar(6) // 六位随机字符，全大写
  title        String         @db.VarChar(100)
  isPaid       Boolean        @default(false)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  BenefitGroup BenefitGroup[]
  benefitConsumed BenefitConsumed[]
}

model BenefitGroup {
  id            Int      @id @default(autoincrement())
  groupId       String   @db.VarChar(6) // 6位随机字符，全大写，不唯一
  title         String   @db.VarChar(100)
  benefitTypeId String   @db.VarChar(6)
  times         Int      @default(1) // 次数
  description   String?  @db.Text
  price         Decimal  @default(0) @db.Decimal(10, 2)
  notShow       Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // 关联关系
  benefitType BenefitType @relation(fields: [benefitTypeId], references: [id], onDelete: Restrict)
}

model BenefitConsumed {
  id           Int      @id @default(autoincrement())
  memberId     Int      // 用户ID
  memberName   String   @db.VarChar(100) // 用户姓名
  memberType   String   @db.VarChar(20) // 用户类型（企业或律师）
  benefitGroup String  @db.VarChar(100) // 用户所属权益分组
  benefitTypeId String  @db.VarChar(6) // 权益类型ID
  benefitTitle String   @db.VarChar(100) // 权益标题
  benefitIsPaid Boolean @default(false) // 权益是否付费
  usedCount    Int      @default(0) // 已使用次数
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // 关联关系
  member Member @relation(fields: [memberId], references: [id], onDelete: Cascade)
  benefitTypeRef BenefitType @relation(fields: [benefitTypeId], references: [id], onDelete: Cascade)

  // 复合唯一约束：用户ID和权益类型ID的组合必须唯一
  @@unique([memberId, benefitTypeId])
}

model EmployeeRoles {
  id          Int      @id @default(autoincrement())
  name        String   @unique @db.VarChar(50) // 角色名称，如管理员、运维人员、普通用户
  description String   @db.Text // 权限描述，如最高权限、运维权限、只读权限
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 关联关系
  employees Employee[]
}

model Employee {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(100)
  email       String   @unique @db.VarChar(100)
  phone       String   @unique @db.VarChar(20)
  password    String   @db.VarChar(255) // 加密后的密码
  roleId      Int      // 引用EmployeeRoles的ID
  status      Int      @default(1) // 1: 在职, 0: 离职
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 关联关系
  role EmployeeRoles @relation(fields: [roleId], references: [id], onDelete: Restrict)
}

model MenuSetting {
  id          String   @id @db.VarChar(12) // 12位随机字符
  title       String   @db.VarChar(100) // 菜单标题
  path        String   @db.VarChar(200) // 菜单路径
  level       Int      @default(0) // 节点深度
  index       Int      @default(0) // 同级节点中的顺序
  icon        String?  @db.VarChar(100) // 图标名称（可以为空）
  parentId    String?  @db.VarChar(12) // 父节点ID
  roleIds     String   @db.Text // JSON格式存储可访问的角色ID数组
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 自关联关系
  parent   MenuSetting?  @relation("MenuHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children MenuSetting[] @relation("MenuHierarchy")
}
